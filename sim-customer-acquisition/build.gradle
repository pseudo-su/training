buildscript {
    ext.kotlin_version = '1.3.50'
    ext.ktor_version = '1.2.4'
    ext.logback_version = '1.2.3'
    ext.slf4j_version = '1.7.25'
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.3"
    }
}

apply plugin: 'kotlin'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'application'

mainClassName = 'com.sim.customer.acquisition.SimpleProducerKt'

sourceSets {
    main.kotlin {
        srcDirs = [ 'src' ]
        includes = [ '*' ]
        excludes = [ '*Test.kt' ]
    }
    main.resources {
        srcDirs = [ 'resources' ]
        includes = [ '*' ]
    }
    sourceSets.test.kotlin.srcDirs = ["src"]
}

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://packages.confluent.io/maven/' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // fake data generator
    compile "com.github.javafaker:javafaker:0.15"

    // logging
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-log4j12:1.7.25'

    // JSON serialization
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.6'

    // Kafka
    compile 'org.apache.kafka:kafka-clients:2.0.0'
    compile 'io.confluent:kafka-avro-serializer:5.0.0'
    
    // Tests
    testCompile  'junit:junit:4.11'
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

// kotlin.experimental.coroutines = 'enable'

shadowJar {
    baseName = 'sim-customer-acquisition'
    classifier = null
    version = null
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                if (configuration.canBeResolved) configuration.resolve()
            }
            subProject.configurations.each { configuration ->
                if (configuration.canBeResolved) configuration.resolve()
            }
        }
    }
}
